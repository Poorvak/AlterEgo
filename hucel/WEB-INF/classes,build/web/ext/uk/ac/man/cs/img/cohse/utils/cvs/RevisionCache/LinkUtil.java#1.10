/*
 * LinkUtil.java
 * Used to manage link creation, manipulation, etc.
 * Created on August 15, 2005, 3:34 PM
 * @author Yeliz Yesilada
 */

package uk.ac.man.cs.img.cohse.utils;

import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Document;

import java.util.Hashtable;
import java.util.HashSet;
import java.util.Locale;
import java.util.Iterator;
import java.util.Enumeration;
import java.util.Map;
import java.util.Arrays;

import java.net.URLDecoder;

import java.lang.IndexOutOfBoundsException;
import java.io.UnsupportedEncodingException;

import org.apache.commons.lang.StringEscapeUtils;

import uk.ac.man.cs.img.cohse.linkboxes.PlainLinkBox;
import uk.ac.man.cs.img.cohse.linkboxes.PlainLinkBoxAccordion;
import uk.ac.man.cs.img.cohse.linkboxes.NestedLinkBox;
import uk.ac.man.cs.img.cohse.linkboxes.LinkBox;
import uk.ac.man.cs.img.cohse.linkboxes.NestedLinkBoxAccordion;
import uk.ac.man.cs.img.cohse.linkboxes.NestedLinkBoxSpotlight;
import uk.ac.man.cs.img.cohse.linkboxes.PlainLinkBoxKeywords;
import uk.ac.man.cs.img.cohse.linkboxes.LinkBoxFactory;

/**
 * @author Yeliz Yesilada
 */
public class LinkUtil {
    
    
    protected LinkBox box = null;
    /*This will be used as a unique counter of span elements*/
    protected int conceptCount = 0;    
    public void setConceptCount(int count){
        this.conceptCount = count;
    }   
    
    /**
     *The following list of caches are used to ease communication with the external services
     ***/
    public static Hashtable conceptCache;
    public static Hashtable resourcesCache;
    public static Hashtable supersCache;
    public static Hashtable subsCache;
    public static Hashtable labelCache;
    
    /**
     *This is the pointer to the ontology service
     **/
    public static OSUtil osUtil = null;    
    public void setOSUtil(OSUtil osUtilParam){
        this.osUtil = osUtilParam;
    }
    
    /**
     *This is the pointer to the annotation service
     **/
    public static ASUtil asUtil = null;    
    public void setASUtil(ASUtil asUtilParam){
        this.asUtil = asUtilParam;
    }
    
    /**
     *Ontology that is currently used to formulate the link box
     */
    public static String ontology = null;    
    public void setOntology (String ont){
        this.ontology = ont;
    }
    
    /**
     *Annotation service components
     **/
    public static String[] components = null;
    public void setComponents(String[] comps){
        this.components = comps;
    }
    
    private String myPageURL = "";
    public static String kainURL = "";
    public static String serviceURL = "";
    public void setServiceURL(String url){
        this.serviceURL = url;
    }
    private Document dom=null;        
    protected String linkBoxTech = null;    
    public void setLinkBoxTech(String tech){
        this.linkBoxTech = tech;
    }
    
    public static String sourceInfo = null;    
    public void setSourceInfo(String info){
        this.sourceInfo = info;
    }
    
    /** Creates a new instance of LinkUtil 
     *@param doc A Document object
     *@param osUtil as OsUtil object
     *@param ont the URI of the ontology
     *@param asUtil an asUtil object
     */
    public LinkUtil(org.w3c.dom.Document doc, OSUtil osUtil, String ont, ASUtil asUtil, String[] components) {
        //Instantiate all caches
        this.conceptCache = new Hashtable();
        this.resourcesCache = new Hashtable();
        this.supersCache = new Hashtable();
        this.subsCache = new Hashtable();
        this.labelCache = new Hashtable();
        
        //reset concept count
        this.conceptCount = 0;
        
        this.asUtil = asUtil;
        this.osUtil = osUtil;
        this.ontology = ont;
        this.components = components;
    }//LinkUtil
    
    /**
     *This method will return an id that will be the unique identifier of the link box
     *@param doc A Document object
     *@param concept the URL of the concept that the linkbox or id is requested for
     *@return int value is returned that is the unique identifier of the div box of the given concept
     */
    public int getLinkBoxId (Document doc, String concept, String pageURL){
        this.myPageURL = pageURL;
        this.dom = doc;
        int uniqueId;
        //We will cache concepts that have already been requested so that we can provide access to the already created div elements
        Integer id = (Integer) conceptCache.get(getResourcesCacheKey(concept.toLowerCase()));
        //If this concept is not in the cache then we create a new Id
        if(id == null) {                                                                                                                       
            conceptCount++;
            uniqueId = conceptCount;
	    //I am not sure about this lowercase stuff....
            conceptCache.put(getResourcesCacheKey(concept.toLowerCase()), new Integer(conceptCount)); 
        }
        //If it is already in the cache then we return that one
        else{
            uniqueId = id.intValue();
        }        
        return uniqueId;
    }//getLinkBoxId

     /**
     *This method will add the appropriate linkbox as a child to the given document
     *@param id This is the id of the concept and the linkbox
     *@param linkBoxDoc This is the document that will be used to add linkbox as a child
     */
    public void getLinkBox(int id, Document linkBoxDoc, String kainURL){
        this.kainURL=kainURL;
        Integer integerId = new Integer(id);
        //If this id is in the cache then we can create a linkbox for the paired concept
        if(conceptCache.containsValue(integerId)){    
            /**
             *Since concept is the key in the conceptCache, HashTable does not support direct lookup for the integer value (id)
             *Therefore here we try to lookup for the id by using the entrySet
             */                 
            Iterator it = conceptCache.entrySet().iterator();            
            while(it.hasNext()){
                 Map.Entry entry = (Map.Entry) it.next();
                 String concept = getConceptFromResourcesCacheKey((String) entry.getKey());
                 Integer testid = (Integer) entry.getValue();
                 if(testid.intValue()==id){
                     //Get the html node
                     Element html = linkBoxDoc.getDocumentElement();
                     //Create a body element to the html node
                     Element body = linkBoxDoc.createElement("body");
                     //Create the linkbox and append it to the body of this document
                     /**
                      *Logging users request
                      */
                     System.out.println("LinkBox is requested on page:"+this.myPageURL+" with ontology: "+ontology+" for id:"+id+" and the term is: "+concept.toLowerCase());
                     //If link box is null then try to initialise it
                     if(box==null){
                         box = LinkBoxFactory.createLinkBoxStyle(this.linkBoxTech);
                     }
                     //If they are not equal then the style is changed
                     else if (!box.getLinkBoxName().equals(this.linkBoxTech)){
                         box = LinkBoxFactory.createLinkBoxStyle(this.linkBoxTech);
                     }
                     
                     //if the box is still null then try to force initialisation with the default style
                     if(box==null){
                         box = new PlainLinkBox();
                     }
                     body.appendChild(box.createLinkBox(linkBoxDoc,concept.toLowerCase(),this.myPageURL, this.conceptCount));
                     
                     if(box!=null){
                         //This will initalise the javascript counter
                         box.setCounter(0);
                     }
                     //Append this body to the html element
                     html.appendChild(body);     
                 }//if
            }//while        
        }//if
        else{
            System.err.println("LinkUtil - getLinkBox method Requested id: "+id+" is not in the concept cache");
        }//else
    }//getLinkBox
    
   
    /**
    *This method will be used to get the label of a concept.
    *@param concept the concept that will be used to get the label for
    *@return the label of the given concept
    */
    public static String getLabel (String concept){
	//First check cache if we know the label of this concept
	String label = (String) labelCache.get(getResourcesCacheKey(concept));
	//if it is not in the cache then contact annotation service to get the label
	if(label==null){   
	    //Contact as to get the label
	    label = osUtil.getConceptRender(ontology, concept);
	    //if we get a label put it in the cache
	    if(label!=null){               
		labelCache.put(getResourcesCacheKey(concept), label);
	    }//if
	    //if it is null, try to get the label from the concept URL
	    else{
		try{
		    String decodedConcept = URLDecoder.decode(concept,"UTF-8");
		    int index = decodedConcept.lastIndexOf("#");
		    label = decodedConcept.substring(index+1);
		    labelCache.put(ontology+"-"+concept, label);
		} catch (IndexOutOfBoundsException e){
		    label="";
		    labelCache.put(ontology+"-"+concept, label);
		} catch (UnsupportedEncodingException e){
		    label="";
		    labelCache.put(ontology+"-"+concept, label); 
		}//catch              
	    }//else
	}//if
	return unescape(label);
    }//getLabel
    
    public static String unescape(String s){
        try{
            return StringEscapeUtils.unescapeHtml(s);
        } catch(Exception e){
            return s;
        }//catch
    }
    /**
     *This is a service method that will be used to getAnnotations, mainly used to check cache and if can't find annotations then it will contact to the service
     *@param concept This is the concept URL that will be used to get the annotations
     *@return it will return an array of COHSEAnnotations
     */
    public static COHSEAnnotation[] getAnnotations(String concept){       
	//First check cache  
	COHSEAnnotation[] annos = (COHSEAnnotation[]) resourcesCache.get(getResourcesCacheKey(concept));
	//if it is not in the cache then getAnnotations and add them to the cache
	if(annos==null){
            annos = asUtil.getAnnotations(concept,ontology,components);
            if (annos == null) {
                annos = new COHSEAnnotation[0];
            } else {
                resourcesCache.put(getResourcesCacheKey(concept), annos);
            }
	}//if
        return annos;
    }//getAnnotations
    
    public static String getResourcesCacheKey(String concept) {
        return ontology+"-"+concept;
    }
    
    public static String getConceptFromResourcesCacheKey(String key){
        return key.substring(ontology.length()+1);
    }
    
    /**
     * Clear all the caches and set the concept count to zero
     */
    public void clearCaches(){
        resourcesCache.clear();
        conceptCache.clear();
        subsCache.clear();
        supersCache.clear();
        conceptCount = 0;
    }  
}
